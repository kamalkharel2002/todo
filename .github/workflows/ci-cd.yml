name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  API_BASE_URL: http://localhost:5001/api
  REGISTRY: docker.io
  IMAGE_BACKEND: ${{ secrets.DOCKER_USERNAME }}/todo-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/todo-frontend

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend (dev)
        uses: docker/build-push-action@v6
        with:
          context: ./Backend
          file: ./Backend/Dockerfile.dev
          push: false
          load: true
          tags: todo-backend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend (dev)
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile.dev
          push: false
          load: true
          tags: todo-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start services
        run: docker compose up -d

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL to be healthy..."
          for i in {1..60}; do
            READY=$(docker inspect -f '{{json .State.Health.Status}}' todo-mysql 2>/dev/null || echo '"starting"')
            echo "MySQL status: $READY"
            [ "$READY" = '"healthy"' ] && echo "MySQL is ready!" && exit 0
            sleep 2
          done
          echo 'MySQL failed to become healthy'
          docker logs todo-mysql
          exit 1

      - name: Wait for Redis
        run: |
          echo "Waiting for Redis to be healthy..."
          for i in {1..60}; do
            READY=$(docker inspect -f '{{json .State.Health.Status}}' todo-redis 2>/dev/null || echo '"starting"')
            echo "Redis status: $READY"
            [ "$READY" = '"healthy"' ] && echo "Redis is ready!" && exit 0
            sleep 2
          done
          echo 'Redis failed to become healthy'
          docker logs todo-redis
          exit 1

      - name: Wait for backend health
        run: |
          echo "Waiting for backend to be healthy..."
          for i in {1..60}; do
            if curl -sf http://localhost:5001/api/health; then
              echo "Backend is ready!"
              exit 0
            fi
            echo "Attempt $i: Backend not ready yet..."
            sleep 2
          done
          echo 'Backend failed to become healthy'
          docker logs todo-backend
          exit 1

      - name: Verify all services are running
        run: |
          echo "=== Docker containers status ==="
          docker ps -a
          echo ""
          echo "=== Docker compose services ==="
          docker compose ps

      - name: Set up Node.js for tests
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install test dependencies
        working-directory: Frontend/tests
        run: npm ci || npm install

      - name: Run tests (Jest)
        working-directory: Frontend/tests
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
        run: npm test -- --runInBand --verbose

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker logs todo-backend || true
          echo ""
          echo "=== Frontend logs ==="
          docker logs todo-frontend || true
          echo ""
          echo "=== MySQL logs ==="
          docker logs todo-mysql || true
          echo ""
          echo "=== Redis logs ==="
          docker logs todo-redis || true

      - name: Teardown services
        if: always()
        run: docker compose down -v

      - name: CI Summary
        if: always()
        run: |
          STATUS="${{ job.status }}"
          echo "## 🎯 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$STATUS" = "success" ]; then
            echo "### ✅ Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Backend build completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Frontend build completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ MySQL health check passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Redis health check passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Backend health check passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All tests executed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Pipeline encountered errors. Check logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  cd:
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./Backend
          file: ./Backend/Dockerfile.dev
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile.dev
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: CD Summary
        if: always()
        run: |
          STATUS="${{ job.status }}"
          echo "## 🚀 CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$STATUS" = "success" ]; then
            echo "### ✅ Status: DEPLOYMENT SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Docker images successfully built and pushed to registry!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Published Images:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_BACKEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_BACKEND }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_FRONTEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_FRONTEND }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pull Commands:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.IMAGE_BACKEND }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.IMAGE_FRONTEND }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Status: DEPLOYMENT FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed to build or push Docker images. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY