name: CI/CD Pipeline

# Trigger: Run on pushes and PRs to main/develop branches
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Environment variables used throughout the workflow
env:
  REGISTRY: docker.io
  IMAGE_BACKEND: ${{ secrets.DOCKER_USERNAME }}/todo-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/todo-frontend

jobs:
  # ========================================
  # CI JOB: Build, Test, Verify
  # ========================================
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Docker with buildx for efficient building
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build backend Docker image (not pushed yet)
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: ./Backend
          file: ./Backend/Dockerfile.dev
          push: false                    # Don't push to registry yet
          load: true                     # Load into local Docker for testing
          tags: todo-backend:ci
          cache-from: type=gha           # Use GitHub Actions cache
          cache-to: type=gha,mode=max

      # Step 4: Build frontend Docker image (not pushed yet)
      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile.dev
          push: false
          load: true
          tags: todo-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 5: Start all services (frontend, backend, MySQL, Redis)
      - name: Start all services
        run: docker compose up -d

      # Step 6: Wait for MySQL to be ready (healthcheck)
      - name: Wait for MySQL
        run: |
          echo "⏳ Waiting for MySQL..."
          for i in {1..60}; do
            READY=$(docker inspect -f '{{json .State.Health.Status}}' todo-mysql 2>/dev/null || echo '"starting"')
            [ "$READY" = '"healthy"' ] && echo "✅ MySQL ready!" && exit 0
            sleep 2
          done
          echo "❌ MySQL failed" && docker logs todo-mysql && exit 1

      # Step 7: Wait for Redis to be ready (healthcheck)
      - name: Wait for Redis
        run: |
          echo "⏳ Waiting for Redis..."
          for i in {1..60}; do
            READY=$(docker inspect -f '{{json .State.Health.Status}}' todo-redis 2>/dev/null || echo '"starting"')
            [ "$READY" = '"healthy"' ] && echo "✅ Redis ready!" && exit 0
            sleep 2
          done
          echo "❌ Redis failed" && docker logs todo-redis && exit 1

      # Step 8: Wait for backend API to be ready
      - name: Wait for backend API
        run: |
          echo "⏳ Waiting for backend..."
          for i in {1..60}; do
            if curl -sf http://localhost:5001/api/health; then
              echo "✅ Backend ready!"
              exit 0
            fi
            sleep 2
          done
          echo "❌ Backend failed" && docker logs todo-backend && exit 1

      # Step 9: Show status of all running containers
      - name: Verify services
        run: |
          echo "📦 Running containers:"
          docker compose ps

      # Step 10: Install Node.js for running tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Step 11: Install test dependencies
      - name: Install test dependencies
        working-directory: Frontend/tests
        run: npm ci || npm install

      # Step 12: Run all tests
      - name: Run tests
        working-directory: Frontend/tests
        env:
          API_BASE_URL: http://localhost:5001/api
        run: npm test -- --runInBand --verbose

      # Step 13: If tests fail, show logs for debugging
      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ===" && docker logs todo-backend
          echo "=== Frontend Logs ===" && docker logs todo-frontend
          echo "=== MySQL Logs ===" && docker logs todo-mysql
          echo "=== Redis Logs ===" && docker logs todo-redis

      # Step 14: Clean up - stop and remove all containers
      - name: Cleanup
        if: always()
        run: docker compose down -v

      # Step 15: Create summary for GitHub Actions UI
      - name: CI Summary
        if: always()
        run: |
          echo "## 🎯 CI Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ All Tests Passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # CD JOB: Deploy to Docker Hub
  # Only runs on main branch after CI passes
  # ========================================
  cd:
    name: Deploy to Docker Hub
    needs: ci                                              # Wait for CI to pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Docker buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push backend image with two tags
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: ./Backend
          file: ./Backend/Dockerfile.dev
          push: true                                       # Push to Docker Hub
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest                # Latest tag
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}     # Commit SHA tag
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Step 5: Build and push frontend image with two tags
      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile.dev
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Step 6: Create deployment summary
      - name: CD Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Deployed to Docker Hub!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Images Published:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_BACKEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 \`${{ env.IMAGE_FRONTEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pull commands:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.IMAGE_BACKEND }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.IMAGE_FRONTEND }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi